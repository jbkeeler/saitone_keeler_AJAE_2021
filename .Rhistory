NDVI_march_april_may_payoff = first(NDVI_march_april_may_payoff), # check this, assumes that this is the same every year, which should be the case
rain_loss = ifelse(sum(rain_loss,na.rm=TRUE) > 0,1,0),
rain_dollar_paid = sum(rain_dollar_paid,na.rm = TRUE),
actual_dollar_loss = sum(actual_dollar_loss,na.rm = TRUE),
actual_dollar_loss_march_april_may = sum(actual_dollar_loss_march_april_may,na.rm = TRUE),
false_negative_march_april_may_single = ifelse(sum(false_negative_march_april_may,na.rm=TRUE) == 1,1,0),
false_negative_march_april_may_both = ifelse(sum(false_negative_march_april_may,na.rm=TRUE) == 2,1,0),
under = ifelse(NDVI_loss > 0 & rain_loss > 0 & rain_dollar_paid < actual_dollar_loss,1,0),
under_march_april_may = ifelse(NDVI_loss_march_april_may > 0 & rain_loss > 0 & rain_dollar_paid < actual_dollar_loss_march_april_may,1,0),
underpay = ifelse(under == 1, rain_dollar_paid-actual_dollar_loss,0),
underpay_march_april_may = ifelse(under_march_april_may == 1, rain_dollar_paid-actual_dollar_loss_march_april_may,0),
over = ifelse(NDVI_loss > 0 & rain_loss > 0 & rain_dollar_paid >= actual_dollar_loss,1,0),
over_march_april_may = ifelse(NDVI_loss_march_april_may > 0 & rain_loss > 0 & rain_dollar_paid >= actual_dollar_loss_march_april_may,1,0),
overpay = ifelse(over == 1, rain_dollar_paid-actual_dollar_loss,0),
overpay_march_april_may = ifelse(over_march_april_may == 1, rain_dollar_paid-actual_dollar_loss_march_april_may,0),
insurance_outcome = (rain_dollar_paid-actual_dollar_loss),
insurance_outcome_march_april_may = (rain_dollar_paid-actual_dollar_loss_march_april_may)
) %>%
ungroup
combo_contract_analysis <- combo_grid_year_contract_analysis %>%
filter(year %in% 2011:2019 & elev_leq_1524 == 1) %>%
group_by(interval_combo,county_base_value) %>%
summarize(
obs = n(),
NDVI_loss_n = sum(NDVI_loss,na.rm = TRUE),
# NDVI_no_loss_n = sum(NDVI_no_loss,na.rm = TRUE),
NDVI_loss_march_april_may_n = sum(NDVI_loss_march_april_may,na.rm = TRUE),
single_n = sum(false_negative_march_april_may_single,na.rm=TRUE),
both_n = sum(false_negative_march_april_may_both,na.rm=TRUE),
false_negative_probability_march_april_may_single = (sum(false_negative_march_april_may_single,na.rm=TRUE)/obs)/((sum(NDVI_march_april_may_payoff,na.rm=TRUE))/obs),
false_negative_probability_march_april_may_both = (sum(false_negative_march_april_may_both,na.rm=TRUE)/obs)/((sum(NDVI_march_april_may_payoff,na.rm=TRUE))/obs),
# RI_indemnity_avg = mean(rain_dollar_paid,na.rm = TRUE),
underpayment_n = sum(under,na.rm = TRUE),
underpayment_avg = mean(underpay,na.rm = TRUE),
underpayment_march_april_may_n = sum(under_march_april_may,na.rm = TRUE),
underpayment_march_april_may_avg = mean(underpay_march_april_may,na.rm = TRUE),
overpayment_n = sum(over,na.rm = TRUE),
overpayment_avg = mean(overpay,na.rm = TRUE),
overpayment_march_april_may_n = sum(over_march_april_may,na.rm = TRUE),
overpayment_march_april_may_avg = mean(overpay_march_april_may,na.rm = TRUE),
years = "2011-2019"
) %>%
ungroup
write.csv(combo_grid_year_contract_analysis, "data_final/combo_analysis_grid_year_contract.csv", na=".")
write.csv(combo_contract_analysis, "data_final/combo_analysis_contract.csv", na=".")
grid_combo_cor <- grid_combo_contract_values %>%
dplyr::select(grid,year,interval,interval_code,interval_combo,RI_percent_of_normal,NDVI_percent_of_normal_march_april_may,direction) %>%
pivot_wider(names_from = direction, values_from = c("interval","interval_code","RI_percent_of_normal")) %>%
filter(!is.na(NDVI_percent_of_normal_march_april_may)) %>%
group_by(grid,interval_combo) %>%
summarize(
RI_NDVI_R2 = summary(lm(NDVI_percent_of_normal_march_april_may ~ RI_percent_of_normal_left + RI_percent_of_normal_right))$r.squared
) %>%
ungroup %>%
group_by(grid) %>%
mutate(
max_R2 = max(RI_NDVI_R2),
optimal = ifelse(RI_NDVI_R2 == max_R2,TRUE,FALSE)
) %>%
ungroup
write.csv(grid_combo_cor, "data_final/grid_interval_combo_R2.csv", na=".")
rm(list = ls())
ca_counties <- readRDS("data_intermediary/ca_counties.RDS") %>%
rename(code = COUNTYFP)
ca_state <- readRDS("data_intermediary/ca_state.RDS")
PRF_grids <- readRDS("data_intermediary/PRF_grids.RDS")
PRF_grids_counties <- readRDS("data_intermediary/PRF_grids_counties.RDS")
veg <- readRDS("data_intermediary/PRF_cal_fraps_veg.RDS")
elev <- readRDS("data_intermediary/PRF_NED_elevation.RDS")
sob_cov <- readRDS("data_intermediary/sob_cov.RDS") %>%
mutate(QuantityType = str_trim(QuantityType))
sob_tpu <- readRDS("data_intermediary/sob_tpu.RDS") %>%
mutate(CommodityReportLevelType = str_trim(CommodityReportLevelType))
rangeland_RI_NDVI_NOAA_CDR <- readRDS("data_final/rangeland_RI_NDVI_NOAA_CDR.RDS") %>%
mutate(
NDVI_percent_of_normal = ifelse(is.nan(NDVI_percent_of_normal) | NDVI_percent_of_normal == -Inf,NA,NDVI_percent_of_normal)
)
PRF_grids_cbv <- left_join(PRF_grids,veg,by=c("grid")) %>%
filter(!is.na(rangeland)) %>%
left_join(contract_quality_grids,by=c("grid")) %>%
mutate(
cbv_factor = factor(
county_base_value,
levels = c(sort(county_base_values),"Non-Rangeland"),
labels = c("13.40","15.90","18.00","18.10","26.40","29.10","29.60","Non-Rangeland")
)
)
rangeland_RI_NDVI_NOAA_CDR <- readRDS("data_final/rangeland_RI_NDVI_NOAA_CDR.RDS") %>%
mutate(
NDVI_percent_of_normal = ifelse(is.nan(NDVI_percent_of_normal) | NDVI_percent_of_normal == -Inf,NA,NDVI_percent_of_normal)
)
rangeland_RI_NDVI_benefits_NOAA_CDR <- readRDS("data_final/rangeland_RI_NDVI_benefits_NOAA_CDR.RDS") %>%
mutate(
NDVI_percent_of_normal = ifelse(is.nan(NDVI_percent_of_normal) | NDVI_percent_of_normal == -Inf,NA,NDVI_percent_of_normal)
)
# relic of hard coded cbv, now just used to get list grids and their 2018 cbv
contract_quality_grids <- rangeland_RI_NDVI_benefits_NOAA_CDR %>%
filter(
year == 2018,
interval_code >= 600,
coverage_level == 0.85,
rangeland == 1,
!is.na(county_base_value),
county_base_value != ".",
) %>%
dplyr::select(
grid,county_base_value
) %>%
group_by(grid) %>%
mutate(
county_base_value = max(county_base_value)
) %>%
ungroup %>%
unique %>%
mutate(grid = as.integer(grid))
write.csv(contract_quality_grids, "data_final/contract_quality_grids.csv", na=".")
# relic of hard coded cbv, now just used to get list grids and their 2018 cbv
contract_quality_grids <- rangeland_RI_NDVI_benefits_NOAA_CDR %>%
filter(
year == 2018,
interval_code >= 600,
coverage_level == 0.85,
rangeland == 1,
!is.na(county_base_value),
county_base_value != ".",
) %>%
dplyr::select(
grid,county_base_value
) %>%
group_by(grid) %>%
mutate(
county_base_value = max(county_base_value)
) %>%
ungroup %>%
unique %>%
mutate(grid = as.integer(grid))
saveRDS(contract_quality_grids,"data_final/contract_quality_grids.RDS")
write.csv(contract_quality_grids, "data_final/contract_quality_grids.csv", na=".")
contract_quality_grids <- readRDS("data_final/contract_quality_grids.RDS")
grid_combo_cor <- readRDS("data_final/grid_interval_combo_R2.RDS")
county_base_values <- unique(contract_quality_grids$county_base_value)
i <-c(
"Lagged October-November",
"Lagged November-December",
"January-February",
"February-March",
"March-April",
"April-May",
"May-June"
)
combos <- list(
list("January-February","February-March","March-April","April-May","May-June"),
list("January-February","February-March","March-April","April-May","May-June"),
list("Lagged October-November","Lagged November-December","March-April","April-May","May-June"),
list("Lagged October-November","Lagged November-December","April-May","May-June"),
list("Lagged October-November","Lagged November-December","January-February","May-June"),
list("Lagged October-November","Lagged November-December","January-February","February-March"),
list("Lagged October-November","Lagged November-December","January-February","February-March","March-April")
)
# after adding the slice, this is pretty much the same as the automatic approach
interval_combos <- data.frame(interval = i, combo = I(combos)) %>%
dplyr::select(interval,combo) %>%
unnest(combo) %>%
mutate(
interval_combo = paste0(interval,", ", combo),
left = interval,
right = as.character(combo)
) %>%
dplyr::select(left,right,interval_combo) %>%
slice(1:10,13:15,18,19,23) %>%
pivot_longer(-interval_combo,names_to = "direction", values_to = "interval")
contracts <- interval_combos %>%
dplyr::select(interval_combo) %>%
unique
write.csv(contracts, "data_final/contract_combinations.csv", na=".")
grid_combo_contract_values  <- rangeland_RI_NDVI_NOAA_CDR %>%
filter(
grid %in% contract_quality_grids$grid,
interval_code %in% c(534,535,625,626,627,628,629),
rangeland == 1
) %>%
dplyr::select(
grid,elev_leq_1524,year,interval,interval_code,RI_percent_of_normal,
NDVI_percent_of_normal,NDVI_percent_of_normal_march_april_may,NDVI_percent_of_normal_april_may
) %>%
arrange(interval_code) %>%
unique %>%
left_join(interval_combos, by = c("interval")) %>%
left_join(contract_quality_grids, by = c("grid")) %>%
dplyr::select(
grid,elev_leq_1524,year,county_base_value,interval,interval_code,interval_combo,direction,RI_percent_of_normal,
NDVI_percent_of_normal,NDVI_percent_of_normal_march_april_may,NDVI_percent_of_normal_april_may
)
saveRDS(grid_combo_contract_values,"data_final/grid_combo_contracts_RI_NDVI.RDS")
write.csv(grid_combo_contract_values, "data_final/grid_combo_contracts_RI_NDVI.csv", na=".")
combo_grid_year_contract_analysis <- grid_combo_contract_values %>%
mutate(
coverage_level = 0.85,
acreage = 1,
productivity_factor = 1,
percent_of_value = 0.5, # ifelse(direction == "left",0.6,0.4)
NDVI_loss = ifelse(NDVI_percent_of_normal < 1,1,0),
NDVI_no_loss = ifelse(NDVI_percent_of_normal >= 1,1,0),
actual_dollar_loss = ifelse(NDVI_percent_of_normal >= 1.0,0,percent_of_value*(1-NDVI_percent_of_normal)*acreage*county_base_value),
NDVI_march_april_may_loss = ifelse(NDVI_percent_of_normal_march_april_may < 1,1,0),
NDV_march_april_may_no_loss = ifelse(NDVI_percent_of_normal_march_april_may >= 1,1,0),
actual_dollar_loss_march_april_may = ifelse(NDVI_percent_of_normal_march_april_may >= 1.0,0,percent_of_value*(1-NDVI_percent_of_normal_march_april_may)*acreage*county_base_value),
rain_loss = ifelse(RI_percent_of_normal < coverage_level,1,0),
rain_no_loss = ifelse(RI_percent_of_normal >= coverage_level,1,0),
rain_dollar_paid = ifelse(rain_loss == 0,0,percent_of_value*((coverage_level - RI_percent_of_normal)/coverage_level)*acreage*county_base_value),
false_negative_march_april_may = ifelse(NDVI_percent_of_normal_march_april_may < coverage_level & RI_percent_of_normal >= coverage_level,1,0),
NDVI_payoff = ifelse(NDVI_percent_of_normal < coverage_level,1,0),
NDVI_no_payoff = ifelse(NDVI_percent_of_normal >= coverage_level,1,0),
NDVI_march_april_may_payoff = ifelse(NDVI_percent_of_normal_march_april_may < coverage_level,1,0),
NDV_march_april_may_no_payoff = ifelse(NDVI_percent_of_normal_march_april_may >= coverage_level,1,0)
) %>%
group_by(grid,year,county_base_value,interval_combo,elev_leq_1524) %>%
summarize(
NDVI_percent_of_normal = sum(percent_of_value*NDVI_percent_of_normal,na.rm=TRUE),
NDVI_percent_of_normal_march_april_may= sum(percent_of_value*NDVI_percent_of_normal_march_april_may,na.rm=TRUE),
RI_percent_of_normal = sum(percent_of_value*RI_percent_of_normal,na.rm=TRUE),
NDVI_loss = ifelse(sum(NDVI_loss,na.rm=TRUE) > 0,1,0),
NDVI_loss_march_april_may = ifelse(sum(NDVI_march_april_may_loss,na.rm=TRUE) > 0 ,1,0),
NDVI_march_april_may_payoff = first(NDVI_march_april_may_payoff), # check this, assumes that this is the same every year, which should be the case
rain_loss = ifelse(sum(rain_loss,na.rm=TRUE) > 0,1,0),
rain_dollar_paid = sum(rain_dollar_paid,na.rm = TRUE),
actual_dollar_loss = sum(actual_dollar_loss,na.rm = TRUE),
actual_dollar_loss_march_april_may = sum(actual_dollar_loss_march_april_may,na.rm = TRUE),
false_negative_march_april_may_single = ifelse(sum(false_negative_march_april_may,na.rm=TRUE) == 1,1,0),
false_negative_march_april_may_both = ifelse(sum(false_negative_march_april_may,na.rm=TRUE) == 2,1,0),
under = ifelse(NDVI_loss > 0 & rain_loss > 0 & rain_dollar_paid < actual_dollar_loss,1,0),
under_march_april_may = ifelse(NDVI_loss_march_april_may > 0 & rain_loss > 0 & rain_dollar_paid < actual_dollar_loss_march_april_may,1,0),
underpay = ifelse(under == 1, rain_dollar_paid-actual_dollar_loss,0),
underpay_march_april_may = ifelse(under_march_april_may == 1, rain_dollar_paid-actual_dollar_loss_march_april_may,0),
over = ifelse(NDVI_loss > 0 & rain_loss > 0 & rain_dollar_paid >= actual_dollar_loss,1,0),
over_march_april_may = ifelse(NDVI_loss_march_april_may > 0 & rain_loss > 0 & rain_dollar_paid >= actual_dollar_loss_march_april_may,1,0),
overpay = ifelse(over == 1, rain_dollar_paid-actual_dollar_loss,0),
overpay_march_april_may = ifelse(over_march_april_may == 1, rain_dollar_paid-actual_dollar_loss_march_april_may,0),
insurance_outcome = (rain_dollar_paid-actual_dollar_loss),
insurance_outcome_march_april_may = (rain_dollar_paid-actual_dollar_loss_march_april_may)
) %>%
ungroup
combo_contract_analysis <- combo_grid_year_contract_analysis %>%
filter(year %in% 2011:2019 & elev_leq_1524 == 1) %>%
group_by(interval_combo,county_base_value) %>%
summarize(
obs = n(),
NDVI_loss_n = sum(NDVI_loss,na.rm = TRUE),
# NDVI_no_loss_n = sum(NDVI_no_loss,na.rm = TRUE),
NDVI_loss_march_april_may_n = sum(NDVI_loss_march_april_may,na.rm = TRUE),
single_n = sum(false_negative_march_april_may_single,na.rm=TRUE),
both_n = sum(false_negative_march_april_may_both,na.rm=TRUE),
false_negative_probability_march_april_may_single = (sum(false_negative_march_april_may_single,na.rm=TRUE)/obs)/((sum(NDVI_march_april_may_payoff,na.rm=TRUE))/obs),
false_negative_probability_march_april_may_both = (sum(false_negative_march_april_may_both,na.rm=TRUE)/obs)/((sum(NDVI_march_april_may_payoff,na.rm=TRUE))/obs),
# RI_indemnity_avg = mean(rain_dollar_paid,na.rm = TRUE),
underpayment_n = sum(under,na.rm = TRUE),
underpayment_avg = mean(underpay,na.rm = TRUE),
underpayment_march_april_may_n = sum(under_march_april_may,na.rm = TRUE),
underpayment_march_april_may_avg = mean(underpay_march_april_may,na.rm = TRUE),
overpayment_n = sum(over,na.rm = TRUE),
overpayment_avg = mean(overpay,na.rm = TRUE),
overpayment_march_april_may_n = sum(over_march_april_may,na.rm = TRUE),
overpayment_march_april_may_avg = mean(overpay_march_april_may,na.rm = TRUE),
years = "2011-2019"
) %>%
ungroup
saveRDS(combo_grid_year_contract_analysis,"data_final/combo_grid_year_contract_analysis.RDS")
write.csv(combo_grid_year_contract_analysis, "data_final/combo_analysis_grid_year_contract.csv", na=".")
saveRDS(combo_contract_analysis,"data_final/combo_contract_analysis.RDS")
write.csv(combo_contract_analysis, "data_final/combo_analysis_contract.csv", na=".")
grid_combo_cor <- grid_combo_contract_values %>%
dplyr::select(grid,year,interval,interval_code,interval_combo,RI_percent_of_normal,NDVI_percent_of_normal_march_april_may,direction) %>%
pivot_wider(names_from = direction, values_from = c("interval","interval_code","RI_percent_of_normal")) %>%
filter(!is.na(NDVI_percent_of_normal_march_april_may)) %>%
group_by(grid,interval_combo) %>%
summarize(
RI_NDVI_R2 = summary(lm(NDVI_percent_of_normal_march_april_may ~ RI_percent_of_normal_left + RI_percent_of_normal_right))$r.squared
) %>%
ungroup %>%
group_by(grid) %>%
mutate(
max_R2 = max(RI_NDVI_R2),
optimal = ifelse(RI_NDVI_R2 == max_R2,TRUE,FALSE)
) %>%
ungroup
saveRDS(grid_combo_cor,"data_final/grid_interval_combo_R2.RDS")
write.csv(grid_combo_cor, "data_final/grid_interval_combo_R2.csv", na=".")
grid_combo_cor <- readRDS("data_final/grid_interval_combo_R2.RDS")
PRF_grids_cbv <- left_join(PRF_grids,veg,by=c("grid")) %>%
filter(!is.na(rangeland)) %>%
left_join(contract_quality_grids,by=c("grid")) %>%
mutate(
cbv_factor = factor(
county_base_value,
levels = c(sort(county_base_values),"Non-Rangeland"),
labels = c("13.40","15.90","18.00","18.10","26.40","29.10","29.60","Non-Rangeland")
)
)
plot <- ggplot() +
geom_sf(data=PRF_grids_cbv, aes(fill = cbv_factor),color = "black",alpha = 0.9,size=0.2) +
geom_sf(data=ca_state, fill = NA,color = "black",alpha = 0.9,size=0.3) +
coord_sf(crs = st_crs(ca_state), datum = NA) +
scale_fill_manual(values = c("Non-Rangeland" = "white", "13.40" = "#d3d3d3", "15.90" = "#acacac", "18.00" = "#878787", "18.10" = "#646464", "26.40" = "#424242", "29.10" = "#242424", "29.60" = "#000000")) +
ggtitle(paste0("PRF Rangeland Grids By County Base Value")) +
labs(caption = "Sources: USDA RMA Pasture, Rangeland, Forage Support Tool; CAL FIRE FRAP") +
theme_map() +
theme(
plot.title = element_text(size = 16,hjust=0.5),
legend.position=c(0.65, 0.60), # "none
legend.title = element_blank(),
plot.background = element_rect(fill = "transparent",colour = NA)
)
ggsave(plot,filename = paste0("Figures/prf_grid_rangelands_cbv.pdf"), width = 6, height = 7.5, device = cairo_pdf)
rangeland_RI_NDVI_dist <- rangeland_RI_NDVI_NOAA_CDR %>%
dplyr::select(grid,year,interval,interval_code,RI_percent_of_normal,NDVI_percent_of_normal,elev_leq_1524,rangeland) %>%
unique %>%
filter(rangeland == 1 & year %in% 2011:2018 & interval_code > 600, elev_leq_1524 == 1) %>%
dplyr::select(RI_percent_of_normal,NDVI_percent_of_normal,elev_leq_1524) %>%
pivot_longer(c("RI_percent_of_normal","NDVI_percent_of_normal"), names_to = "source", values_to = "index_value")
mean_ri <- mean(filter(rangeland_RI_NDVI_dist,source == "RI_percent_of_normal")$index_value, na.rm = TRUE)
max_ri <- max(filter(rangeland_RI_NDVI_dist,source == "RI_percent_of_normal")$index_value, na.rm = TRUE)
ggplot() +
stat_density(data=filter(rangeland_RI_NDVI_dist,source == "RI_percent_of_normal"), aes(x=index_value),fill = "black", alpha = 0.85,geom = "area", position = "identity", bw = "SJ", kernel = "epanechnikov") +
geom_vline(xintercept=mean_ri, color = "gray30", linetype="dashed", size=0.5, alpha = 0.8) +
annotate(geom="label", x=mean_ri, y = Inf, hjust = "left", vjust = 1, label = paste0("Mean = ",round(mean_ri, digits = 3))) +
annotate(geom="label", x=Inf, y = Inf, hjust = "right", vjust = 1, label = paste0("Max = ",round(max_ri, digits = 3))) +
#scale_x_continuous(expand = c(0, 0)) +
#facet_wrap(~status,ncol=1) +
#scale_color_manual(values = c("CIMIS" = "#800000", "NOAA" = "#008080")) +
coord_cartesian(xlim=c(0, 5)) +
ggtitle("Distribution of Rainfall Index Values for California Rangelands, 2011-2018") +
labs(x = "Rainfall Index Value", y = "Density") +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5,size=11),
legend.position = "none",
panel.grid.major.x = element_blank(),
#axis.title.x = element_text(family="serif"),
#axis.title.x = element_blank(),
axis.title.y = element_blank(),
#axis.text.x = element_text(family="serif"),
#axis.text.y = element_blank(),
legend.text = element_text(size ="12"), # ,family="serif"
legend.title = element_blank()
)
ggsave(paste0("Figures/rangeland_RI_NDVI_elev_leq_1524_density_2011_2018_RI_NOAA_CDR.pdf"), width=8, height=4, device = cairo_pdf)
mean_ndvi <- mean(filter(rangeland_RI_NDVI_dist,source == "NDVI_percent_of_normal")$index_value, na.rm = TRUE)
max_ndvi <- max(filter(rangeland_RI_NDVI_dist,source == "NDVI_percent_of_normal")$index_value, na.rm = TRUE)
min_ndvi <- min(filter(rangeland_RI_NDVI_dist,source == "NDVI_percent_of_normal")$index_value, na.rm = TRUE)
ggplot() +
stat_density(data=filter(rangeland_RI_NDVI_dist,source == "NDVI_percent_of_normal"), aes(x=index_value),fill = "black", alpha = 0.85,geom = "area", position = "identity", bw = "SJ", kernel = "epanechnikov") +
geom_vline(xintercept=mean_ndvi, color = "gray30", linetype="dashed", size=0.5, alpha = 0.8) +
annotate(geom="label", x=mean_ndvi, y = Inf, hjust = "left", vjust = 1, label = paste0("Mean = ",round(mean_ndvi, digits = 3))) +
annotate(geom="label", x=Inf, y = Inf, hjust = "right", vjust = 1, label = paste0("Max = ",round(max_ndvi, digits = 3))) +
annotate(geom="label", x=-Inf, y = Inf, hjust = "left", vjust = 1, label = paste0("Min = ",round(min_ndvi, digits = 3))) +
#facet_wrap(~status,ncol=1) +
#scale_color_manual(values = c("CIMIS" = "#800000", "NOAA" = "#008080")) +
coord_cartesian(xlim=c(0, 2)) +
ggtitle("Distribution of NDVI (NOAA CDR) Index Values for California Rangelands, 2011-2018") +
labs(x = "NDVI Index Value", y = "Density") +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5,size=11),
legend.position = "none",
panel.grid.major.x = element_blank(),
#axis.title.x = element_text(family="serif"),
#axis.title.x = element_blank(),
axis.title.y = element_blank(),
#axis.text.x = element_text(family="serif"),
#axis.text.y = element_blank(),
legend.text = element_text(size ="12"), # ,family="serif"
legend.title = element_blank()
)
ggsave(paste0("Figures/rangeland_RI_NDVI_elev_leq_1524_density_2011_2018_NDVI_NOAA_CDR.pdf"), width=8, height=4, device = cairo_pdf)
rangeland_RI_NDVI_dist <- rangeland_RI_NDVI_NOAA_CDR %>%
dplyr::select(grid,year,interval,interval_code,RI_percent_of_normal,NDVI_percent_of_normal,elev_leq_1524,rangeland) %>%
unique %>%
filter(rangeland == 1 & year %in% 2011:2018 & interval_code > 600, elev_leq_1524 == 1) %>%
dplyr::select(RI_percent_of_normal,NDVI_percent_of_normal,elev_leq_1524) %>%
pivot_longer(c("RI_percent_of_normal","NDVI_percent_of_normal"), names_to = "source", values_to = "index_value")
mean_ri <- mean(filter(rangeland_RI_NDVI_dist,source == "RI_percent_of_normal")$index_value, na.rm = TRUE)
max_ri <- max(filter(rangeland_RI_NDVI_dist,source == "RI_percent_of_normal")$index_value, na.rm = TRUE)
ggplot() +
stat_density(data=filter(rangeland_RI_NDVI_dist,source == "RI_percent_of_normal"), aes(x=index_value),fill = "black", alpha = 0.85,geom = "area", position = "identity", bw = "SJ", kernel = "epanechnikov") +
geom_vline(xintercept=mean_ri, color = "gray30", linetype="dashed", size=0.5, alpha = 0.8) +
annotate(geom="label", x=mean_ri, y = Inf, hjust = "left", vjust = 1, label = paste0("Mean = ",round(mean_ri, digits = 3))) +
annotate(geom="label", x=Inf, y = Inf, hjust = "right", vjust = 1, label = paste0("Max = ",round(max_ri, digits = 3))) +
#scale_x_continuous(expand = c(0, 0)) +
#facet_wrap(~status,ncol=1) +
#scale_color_manual(values = c("CIMIS" = "#800000", "NOAA" = "#008080")) +
coord_cartesian(xlim=c(0, 5)) +
ggtitle("Distribution of Rainfall Index Values for California Rangelands, 2011-2018") +
labs(x = "Rainfall Index Value", y = "Density") +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5,size=11),
legend.position = "none",
panel.grid.major.x = element_blank(),
#axis.title.x = element_text(family="serif"),
#axis.title.x = element_blank(),
axis.title.y = element_blank(),
#axis.text.x = element_text(family="serif"),
#axis.text.y = element_blank(),
legend.text = element_text(size ="12"), # ,family="serif"
legend.title = element_blank()
)
PRF_grids_r2 <- left_join(PRF_grids,filter(grid_combo_cor,RI_NDVI_R2 == max_R2),by=c("grid")) %>%
mutate(
interval_combo = factor(
interval_combo,
levels= c(
"Lagged October-November, January-February",
"Lagged October-November, February-March",
"Lagged October-November, March-April",
"Lagged October-November, April-May",
"Lagged October-November, May-June",
"Lagged November-December, January-February",
"Lagged November-December, February-March",
"Lagged November-December, March-April",
"Lagged November-December, April-May",
"Lagged November-December, May-June",
"January-February, March-April",
"January-February, April-May",
"January-February, May-June",
"February-March, April-May",
"February-March, May-June",
"March-April, May-June"
)#,
#labels = c("October-November (t-1)", "November-December (t-1)", "January-February", "February-March")
)
)
combos <- unique(grid_combo_cor$interval_combo)
plot <- ggplot() +
geom_sf(data=PRF_grids_r2, aes(fill = interval_combo),color = "black",alpha = 0.9,size=0.2) +
geom_sf(data=ca_state, fill = NA,color = "black",alpha = 0.9,size=0.3) +
coord_sf(crs = st_crs(ca_state), datum = NA) +
scale_fill_discrete(na.value="transparent") +
ggtitle(paste0("Optimal Interval Combos by PRF Grid (R-squared)")) +
theme_map() +
theme(
plot.title = element_text(size = 16, hjust = 3),
plot.margin = margin(0, 9, 0, 0, "cm"),
legend.position=c(1, 0.30), # "none
legend.title = element_blank(),
plot.background = element_rect(fill = "transparent",colour = NA)
)
ggsave(plot,filename = paste0("Figures/prf_grid_optimal_combos.pdf"), width = 9, height = 7.5, device = cairo_pdf)
View(PRF_grids_cbv)
PRF_grids_cbv <- left_join(PRF_grids,veg,by=c("grid")) %>%
filter(!is.na(rangeland)) %>%
left_join(contract_quality_grids,by=c("grid")) %>%
mutate(
cbv_factor = factor(
county_base_value,
levels = c(sort(county_base_values),"Non-Rangeland"),
labels = c("13.40","15.90","18.00","18.10","26.40","29.10","29.60","Non-Rangeland")
)
)
View(PRF_grids_cbv)
PRF_grids_cbv <- left_join(PRF_grids,veg,by=c("grid")) %>%
filter(!is.na(rangeland)) %>%
left_join(contract_quality_grids,by=c("grid")) %>%
mutate(
county_base_value = ifelse(veg_cat == "non_rangeland","non_rangeland",county_base_value)
cbv_factor = factor(
county_base_value,
levels = c(sort(county_base_values),"Non-Rangeland"),
labels = c("13.40","15.90","18.00","18.10","26.40","29.10","29.60","Non-Rangeland")
)
)
PRF_grids_cbv <- left_join(PRF_grids,veg,by=c("grid")) %>%
filter(!is.na(rangeland)) %>%
left_join(contract_quality_grids,by=c("grid")) %>%
mutate(
county_base_value = ifelse(veg_cat == "non_rangeland","non_rangeland",county_base_value),
cbv_factor = factor(
county_base_value,
levels = c(sort(county_base_values),"Non-Rangeland"),
labels = c("13.40","15.90","18.00","18.10","26.40","29.10","29.60","Non-Rangeland")
)
)
View(PRF_grids_cbv)
PRF_grids_cbv <- left_join(PRF_grids,veg,by=c("grid")) %>%
filter(!is.na(rangeland)) %>%
left_join(contract_quality_grids,by=c("grid")) %>%
mutate(
county_base_value = ifelse(veg_cat == "non_rangeland","non_rangeland",county_base_value),
cbv_factor = factor(
county_base_value,
levels = c(sort(county_base_values),"non_rangeland"),
labels = c("13.40","15.90","18.00","18.10","26.40","29.10","29.60","Non-Rangeland")
)
)
View(PRF_grids_cbv)
plot <- ggplot() +
geom_sf(data=PRF_grids_cbv, aes(fill = cbv_factor),color = "black",alpha = 0.9,size=0.2) +
geom_sf(data=ca_state, fill = NA,color = "black",alpha = 0.9,size=0.3) +
coord_sf(crs = st_crs(ca_state), datum = NA) +
scale_fill_manual(values = c("Non-Rangeland" = "white", "13.40" = "#d3d3d3", "15.90" = "#acacac", "18.00" = "#878787", "18.10" = "#646464", "26.40" = "#424242", "29.10" = "#242424", "29.60" = "#000000")) +
ggtitle(paste0("PRF Rangeland Grids By County Base Value")) +
labs(caption = "Sources: USDA RMA Pasture, Rangeland, Forage Support Tool; CAL FIRE FRAP") +
theme_map() +
theme(
plot.title = element_text(size = 16,hjust=0.5),
legend.position=c(0.65, 0.60), # "none
legend.title = element_blank(),
plot.background = element_rect(fill = "transparent",colour = NA)
)
ggsave(plot,filename = paste0("Figures/prf_grid_rangelands_cbv.pdf"), width = 6, height = 7.5, device = cairo_pdf)
sessionInfo()
writeLines(capture.output(sessionInfo()), "sessionInfo.txt")
getwd()
